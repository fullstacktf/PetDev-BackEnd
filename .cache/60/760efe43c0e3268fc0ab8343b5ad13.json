{"id":"../node_modules/regexp-clone/index.js","dependencies":[{"name":"/home/aaron/FullStack/PetDev/PetDev-BackEnd/package.json","includedInParent":true,"mtime":1564481224641},{"name":"/home/aaron/FullStack/PetDev/PetDev-BackEnd/node_modules/regexp-clone/package.json","includedInParent":true,"mtime":1564480381697}],"generated":{"js":"\nconst toString = Object.prototype.toString;\n\nfunction isRegExp (o) {\n  return 'object' == typeof o\n      && '[object RegExp]' == toString.call(o);\n}\n\nmodule.exports = exports = function (regexp) {\n  if (!isRegExp(regexp)) {\n    throw new TypeError('Not a RegExp');\n  }\n\n  const flags = [];\n  if (regexp.global) flags.push('g');\n  if (regexp.multiline) flags.push('m');\n  if (regexp.ignoreCase) flags.push('i');\n  if (regexp.dotAll) flags.push('s');\n  if (regexp.unicode) flags.push('u');\n  if (regexp.sticky) flags.push('y');\n  const result = new RegExp(regexp.source, flags.join(''));\n  if (typeof regexp.lastIndex === 'number') {\n    result.lastIndex = regexp.lastIndex;\n  }\n  return result;\n}\n\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/regexp-clone/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/regexp-clone/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/regexp-clone/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/regexp-clone/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/regexp-clone/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/regexp-clone/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/regexp-clone/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/regexp-clone/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/regexp-clone/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/regexp-clone/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/regexp-clone/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/regexp-clone/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/regexp-clone/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/regexp-clone/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/regexp-clone/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/regexp-clone/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/regexp-clone/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/regexp-clone/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/regexp-clone/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/regexp-clone/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/regexp-clone/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/regexp-clone/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/regexp-clone/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/regexp-clone/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/regexp-clone/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/regexp-clone/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/regexp-clone/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/regexp-clone/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}}],"sources":{"../node_modules/regexp-clone/index.js":"\nconst toString = Object.prototype.toString;\n\nfunction isRegExp (o) {\n  return 'object' == typeof o\n      && '[object RegExp]' == toString.call(o);\n}\n\nmodule.exports = exports = function (regexp) {\n  if (!isRegExp(regexp)) {\n    throw new TypeError('Not a RegExp');\n  }\n\n  const flags = [];\n  if (regexp.global) flags.push('g');\n  if (regexp.multiline) flags.push('m');\n  if (regexp.ignoreCase) flags.push('i');\n  if (regexp.dotAll) flags.push('s');\n  if (regexp.unicode) flags.push('u');\n  if (regexp.sticky) flags.push('y');\n  const result = new RegExp(regexp.source, flags.join(''));\n  if (typeof regexp.lastIndex === 'number') {\n    result.lastIndex = regexp.lastIndex;\n  }\n  return result;\n}\n\n"},"lineCount":28}},"error":null,"hash":"825e579e9d18a05a6827d84c87c840a4","cacheData":{"env":{}}}